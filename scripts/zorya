#!/bin/bash

##############################################################################
#                          SCRIPT STYLING / LAYOUT
##############################################################################

# Simple color/bold definitions (optional)
RESET="\033[0m"
BOLD="\033[1m"
CYAN="\033[36m"
GREEN="\033[32m"

echo ""
# Simple banner replacement
print_banner() {
  cat << "EOF"
███████╗ ██████╗ ██████╗ ██╗   ██╗ █████╗ 
╚══███╔╝██╔═══██╗██╔══██╗╚██╗ ██╔╝██╔══██╗
  ███╔╝ ██║   ██║██████╔╝ ╚████╔╝ ███████║
 ███╔╝  ██║   ██║██╔══██╗  ╚██╔╝  ██╔══██║
███████╗╚██████╔╝██║  ██║   ██║   ██║  ██║
╚══════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝
EOF
  echo -e "    ${CYAN}${BOLD}Next Generation Concolic Analysis${RESET}"
}

# Section divider
section_divider() {
  echo -e "${CYAN}***********************************************************************${RESET}"
}

##############################################################################
#                          INITIAL SETUP
##############################################################################

# ZORYA_DIR will be replaced during installation
ZORYA_DIR="__ZORYA_DIR__"

if [ "$ZORYA_DIR" == "__ZORYA_DIR__" ]; then
    echo "Error: ZORYA_DIR is not set. Please reinstall the zorya command."
    exit 1
fi

PCODE_GENERATOR_DIR="$ZORYA_DIR/external/pcode-generator"
INIT_DATA_DIR="$ZORYA_DIR/results/initialization_data"
TARGET_INFO_RS="$ZORYA_DIR/src/target_info.rs"

if [ ! -d "$PCODE_GENERATOR_DIR" ]; then
  echo "Error: Pcode generator directory not found at $PCODE_GENERATOR_DIR."
  exit 1
fi

if [ ! -d "$INIT_DATA_DIR" ]; then
  echo "Error: Initialization data directory not found at $INIT_DATA_DIR."
  exit 1
fi

# Check if user provided a binary path
if [ -z "$1" ]; then
    echo "Usage: zorya /path/to/bin"
    exit 1
fi
BIN_PATH="$1"

export ZORYA_DIR="$ZORYA_DIR"
export BIN_PATH="$BIN_PATH"

##############################################################################
#                          HELPER FUNCTIONS
##############################################################################

get_entry_point() {
    local bin_file="$1"
    readelf -h "$bin_file" | awk '/Entry point address:/ {print $NF}'
}

get_main_address() {
    local bin_file="$1"
    local main_addr=""
    
    while IFS= read -r line; do
        symbol=$(echo "$line" | awk '{print $NF}')
        address=$(echo "$line" | awk '{print "0x"$1}')
        
        if [[ "$symbol" == "main.main" ]]; then
            echo "$address"
            return
        elif [[ "$symbol" == "main" ]]; then
            main_addr="$address"
        fi
    done < <(nm "$bin_file")
    
    if [[ -n "$main_addr" ]]; then
        echo "$main_addr"
    fi
}

##############################################################################
#                          MAIN SCRIPT FLOW
##############################################################################

print_banner

ENTRY_POINT=$(get_entry_point "$BIN_PATH")

# 1) Ask the user "Where to begin the analysis?" (start/main/function/custom)
echo ""
echo "Where to begin the analysis? (start / main / function / custom)"
read -p "[main]: " MODE
MODE="${MODE:-main}"   # Default to "main" if empty
echo ""

ARGS="none"
ADDR=""

# 2) Determine address based on mode
case "$MODE" in
  main)
    ADDR=$(get_main_address "$BIN_PATH")
    if [ -z "$ADDR" ]; then
      echo "Error: Could not find the main function address."
      exit 1
    fi
    echo -e "${GREEN}Automatically detected main function address: $ADDR${RESET}"
    section_divider
    ;;
  start)
    ADDR="$ENTRY_POINT"
    echo -e "${GREEN}Automatically detected entry point: $ADDR${RESET}"
    section_divider
    ;;
  function|custom)
    while true; do
      echo ""
      read -p "What address does this correspond to? (hex e.g., 0x123): " user_addr
      user_addr="$(echo "$user_addr" | tr -d '\r' | xargs)"  # Trim whitespace, strip \r
      section_divider
      if [[ "$user_addr" =~ ^0x[0-9A-Fa-f]+$ || "$user_addr" =~ ^[0-9]+$ ]]; then
        ADDR="$user_addr"
        break
      else
        echo "Invalid address. Please enter a valid hexadecimal (e.g. 0x123) or decimal format."
      fi
    done
    ;;
  *)
    echo "Error: Unknown mode selected."
    exit 1
    ;;
esac

# 3) Ask for binary arguments
echo ""
echo "Does the binary expect any arguments? (none / e.g., x y z)"
read -p "[none]: " ARGS
ARGS="${ARGS:-none}"
echo ""
section_divider

# 4) Export environment variables for Rust usage
export MODE="$MODE"
export ARGS="$ARGS"
export START_POINT="$ADDR"

COMMAND="$ZORYA_DIR/zorya $BIN_PATH --mode $MODE $ADDR"
if [ "$ARGS" != "none" ]; then
  COMMAND="$COMMAND --arg $ARGS"
fi

echo "Running command: $COMMAND"
echo ""
echo "Generating Pcode for $BIN_PATH..."

cd "$PCODE_GENERATOR_DIR" || exit
cargo run "$BIN_PATH" --low-pcode

PCODE_FILE="$PCODE_GENERATOR_DIR/results/$(basename "$BIN_PATH")_low_pcode.txt"
if [ ! -f "$PCODE_FILE" ]; then
  echo "Failed to generate Pcode."
  exit 1
fi

echo ""
echo "Generating memory and CPU register dumps..."
chmod +x "$ZORYA_DIR/scripts/dump_memory.sh"
"$ZORYA_DIR/scripts/dump_memory.sh" "$BIN_PATH" "$ADDR" "$ENTRY_POINT" "$ARGS"

if [ "$ARGS" != "none" ]; then
  echo ""
  echo "Writing argc and argv to memory..."
  cd "$ZORYA_DIR" || exit
  RUSTFLAGS="-Awarnings" cargo run -- --write-args "$ARGS"
fi

echo ""
echo -e "${GREEN}${BOLD}All tasks completed successfully.${RESET}"
