#!/usr/bin/env bash
##############################################################################
#                             Z O R Y A  wrapper
#   Interactive by default – but any missing info can be supplied via flags.
##############################################################################

RESET="\033[0m"; BOLD="\033[1m"; CYAN="\033[36m"; GREEN="\033[32m"

print_banner() {
  cat << 'EOF'
███████╗ ██████╗ ██████╗ ██╗   ██╗ █████╗ 
╚══███╔╝██╔═══██╗██╔══██╗╚██╗ ██╔╝██╔══██╗
  ███╔╝ ██║   ██║██████╔╝ ╚████╔╝ ███████║
 ███╔╝  ██║   ██║██╔══██╗  ╚██╔╝  ██╔══██║
███████╗╚██████╔╝██║  ██║   ██║   ██║  ██║
╚══════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝
EOF
  echo -e "    ${CYAN}${BOLD}Next Generation Concolic Analysis${RESET}"
}
divider() { echo -e "${CYAN}*************************************************************************************${RESET}"; }

##############################################################################
#                         INSTALL-TIME PATHS
##############################################################################
ZORYA_DIR="__ZORYA_DIR__"
[[ "$ZORYA_DIR" == "__ZORYA_DIR__" ]] && { echo "Reinstall required"; exit 1; }

PCODE_GENERATOR_DIR="$ZORYA_DIR/external/pcode-generator"
INIT_DATA_DIR="$ZORYA_DIR/results/initialization_data"
[[ ! -d "$PCODE_GENERATOR_DIR" || ! -d "$INIT_DATA_DIR" ]] && { echo "Run: make all"; exit 1; }

##############################################################################
#                         HELPER FUNCTIONS
##############################################################################
get_entry_point() { readelf -h "$1" | awk '/Entry point address:/ {print $NF}'; }

# Be abale to find main() in C/C++ binaries and main.main() in Go binaries
get_main_addr() {
  nm "$1" | awk '
      / main.main$/     {print "0x"$1; found=1; exit}
      / main$/          {m="0x"$1}
      END{if(!found && m)print m}'
}


##############################################################################
#                         BASIC ARG PARSER
##############################################################################
if [[ -z "$1" || "$1" == -* ]]; then
  echo "Usage: zorya <binary> [--lang go|c|c++] [--compiler tinygo|gc] \\"
  echo "                [--mode start|main|function|custom <addr>] [--arg …]"
  exit 1
fi
BIN_PATH="$1"; shift || true

SOURCE_LANG=""; COMPILER=""; MODE=""; ADDR=""; ARGS="none"; NEGATE_FLAG=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --lang)      SOURCE_LANG="$2"; shift 2 ;;
    --compiler)  COMPILER="$2";    shift 2 ;;
    --mode)      MODE="$2";        shift 2
                 if [[ "$MODE" =~ ^(function|custom)$ && $# -gt 0 && "$1" != "--"* ]]; then
                     ADDR="$1"; shift
                 fi ;;
    --arg)       shift; ARGS="$*"; break ;;
    --negate)    NEGATE_FLAG="true"; shift ;;
    --no-negate) NEGATE_FLAG="false"; shift ;;
    --help|-h)   exec "$0" -h ;;
    *)           echo "Unknown flag: $1"; exit 1 ;;
  esac
done


##############################################################################
#                        INTERACTIVE QUESTIONS (fallback)
##############################################################################

echo ""
print_banner

# 0. language
if [[ -z "$SOURCE_LANG" ]]; then
  echo ""; echo "What is the source language of the binary? (go, c or c++)"
  read -rp "[go]: " SOURCE_LANG; SOURCE_LANG="${SOURCE_LANG:-go}"
fi; export SOURCE_LANG

# 0b. Go compiler
if [[ "${SOURCE_LANG,,}" == "go" && -z "$COMPILER" ]]; then
  echo ""; echo "Which Go compiler was used? (tinygo / gc)"
  read -rp "[tinygo]: " COMPILER; COMPILER="${COMPILER:-tinygo}"
fi; export COMPILER
divider

ENTRY_POINT=$(get_entry_point "$BIN_PATH")

# 1. mode
if [[ -z "$MODE" ]]; then
  echo ""; echo "Where to begin the analysis? (start / main / function / custom)"
  read -rp "[main]: " MODE; MODE="${MODE:-main}"
fi

# 2. address selection by mode (if still missing)
case "$MODE" in
  start) [[ -z "$ADDR" ]] && ADDR="$ENTRY_POINT"
         echo -e "${GREEN}Entry point: $ADDR${RESET}" ;;
  main)  [[ -z "$ADDR" ]] && ADDR=$(get_main_addr "$BIN_PATH")
         [[ -z "$ADDR" ]] && { echo "Could not locate main"; exit 1; }
         echo -e "${GREEN}Main address: $ADDR${RESET}" ;;
  function|custom)
         while [[ -z "$ADDR" ]]; do
             echo ""; read -rp "At what address should the analysis begin? (hex e.g. 0x123): " ADDR
             [[ "$ADDR" =~ ^0x[0-9a-fA-F]+$ || "$ADDR" =~ ^[0-9]+$ ]] || ADDR=""
         done ;;
  *) echo "Unknown mode"; exit 1 ;;
esac
divider

# 3. runtime arguments
if [[ "$ARGS" == "none" ]]; then
  echo ""; echo "Does the binary expect any arguments? (none / e.g., x y z)"
  read -rp "[none]: " ARGS; ARGS="${ARGS:-none}"
fi
divider

# 4. Enable negating path exploration (if not set via flag)
if [[ -z "$NEGATE_PATH_FLAG" ]]; then
  echo ""; echo "Do you want to activate the negating path execution to cover symbolically more paths?"
  read -rp "[Y/n]: " ENABLE_NEGATING; ENABLE_NEGATING="${ENABLE_NEGATING,,}"  # to lowercase
  if [[ "$ENABLE_NEGATING" == "n" || "$ENABLE_NEGATING" == "no" ]]; then
    NEGATE_PATH_FLAG="false"
  else
    NEGATE_PATH_FLAG="true"
  fi
fi
divider

##############################################################################
#                        ENV EXPORTS & COMMAND LINE
##############################################################################
export MODE ARGS START_POINT="$ADDR" ZORYA_DIR BIN_PATH NEGATE_PATH_FLAG="$NEGATE_PATH_FLAG"

CMD="$ZORYA_DIR/zorya $BIN_PATH --mode $MODE $ADDR"
[[ -n "$SOURCE_LANG" ]] && CMD+=" --lang $SOURCE_LANG"
[[ -n "$COMPILER"     ]] && CMD+=" --compiler $COMPILER"
[[ "$ARGS" != "none"  ]] && CMD+=" --arg $ARGS"
[[ "$NEGATE_PATH_FLAG" == "true" ]] && CMD+=" --negate-path-exploration" || CMD+=" --no-negate-path-exploration"

echo "Running command: $CMD"
echo ""; echo "Generating Pcode…"

cd "$PCODE_GENERATOR_DIR" || exit 1
cargo run "$BIN_PATH" --low-pcode

PCODE_FILE="$PCODE_GENERATOR_DIR/results/$(basename "$BIN_PATH")_low_pcode.txt"
[[ ! -f "$PCODE_FILE" ]] && { echo "Pcode generation failed."; exit 1; }

echo ""; echo "Generating memory and CPU register dumps…"
chmod +x "$ZORYA_DIR/scripts/dump_memory.sh"
"$ZORYA_DIR/scripts/dump_memory.sh" "$BIN_PATH" "$ADDR" "$ENTRY_POINT" "$ARGS"

if [[ "$ARGS" != "none" ]]; then
  echo ""; echo "Writing argc/argv to memory…"
  cd "$ZORYA_DIR" || exit 1
  RUSTFLAGS="-Awarnings" cargo run -- --write-args "$ARGS"
fi
